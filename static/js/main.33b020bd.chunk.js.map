{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","SearchBox","handleChange","type","placeholder","onChange","App","useState","setmMonsters","searchField","setSearchField","filteredMonsters","filter","toLowerCase","includes","useEffect","fetch","then","res","json","users","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAceA,G,MAXF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAEX,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAI,YAC1E,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,aCMTC,G,MAXE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAEf,OACI,qBAAKP,UAAU,YAAf,SAEQO,EAASC,KAAI,SAAAT,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,WCG5CO,G,MATG,SAAC,GAAD,IAAEC,EAAF,EAAEA,aAAF,OACd,uBACIV,UAAU,SACVW,KAAK,SACLC,YAAY,eACZC,SAAUH,MCyBHI,G,MA3BH,WAAO,IAAD,EACiBC,mBAAS,IAD1B,mBACTR,EADS,KACCS,EADD,OAEsBD,mBAAS,IAF/B,mBAETE,EAFS,KAEIC,EAFJ,KAIVC,EAAmBZ,EAASa,QAAO,SAAArB,GAAO,OAC9CA,EAAQK,KAAKiB,cAAcC,SAASL,EAAYI,kBAalD,OANAE,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAIZ,EAAaY,QAC9B,IAGA,sBAAK5B,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,sBACA,cAAC,EAAD,CAAWU,aAbM,SAACmB,GACpBX,EAAeW,EAAEC,OAAOC,UAatB,cAAC,EAAD,CAAUxB,SAAUY,SChBXa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.33b020bd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nconst Card = ({monster}) => {\r\n    // console.log(monster);\r\n    return(\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${monster.id}?set=set4&size=180x180`} alt=\"monster\"/>\r\n            <h2>{monster.name}</h2>\r\n            <p>{monster.email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../card/card';\r\nimport './card-list.css';\r\n\r\nconst CardList = ({monsters}) => {\r\n    \r\n    return(\r\n        <div className=\"card-list\">\r\n            {\r\n                monsters.map(monster => <Card key={monster.id} monster={monster}/>)\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './search-box.css';\r\n\r\nconst SearchBox = ({handleChange}) => (\r\n    <input\r\n        className=\"search\" \r\n        type=\"seacrh\" \r\n        placeholder=\"search input\" \r\n        onChange={handleChange}\r\n    />\r\n)\r\n\r\nexport default SearchBox;","import React, {useState, useEffect} from 'react';\nimport CardList from './components/card-list/card-list';\nimport SearchBox from './components/search-box/search-box';\n\nimport './App.css';\n\nconst App = () => {\n  const [monsters, setmMonsters] = useState([]);\n  const [searchField, setSearchField] = useState('');\n\n  const filteredMonsters = monsters.filter(monster => \n    monster.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n\n  const handleChange = (e) => {\n    setSearchField(e.target.value);\n  }\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => setmMonsters(users))\n  },[])\n  \n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Catzones</h1>\n      <SearchBox handleChange={handleChange}/>\n      <CardList monsters={filteredMonsters}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}